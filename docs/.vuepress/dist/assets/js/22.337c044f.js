(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{207:function(e,n,s){"use strict";s.r(n);var t=s(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"go"}},[e._v("Go")]),e._v(" "),s("p",[e._v("KubeMQ is an enterprise-grade message broker for containers, designed for any workload and architecture running in Kubernetes.\nThis library is Go implementation of KubeMQ client connection.")]),e._v(" "),s("h3",{attrs:{id:"installation"}},[e._v("Installation")]),e._v(" "),s("p",[s("code",[e._v("$ go get -u github.com/kubemq-io/kubemq-go")])]),e._v(" "),s("h3",{attrs:{id:"examples"}},[e._v("Examples")]),e._v(" "),s("p",[e._v("Please find usage examples on the examples folders.")]),e._v(" "),s("h3",{attrs:{id:"kubemq-server"}},[e._v("KubeMQ server")]),e._v(" "),s("p",[e._v("Please visit https://kubemq.io, create an account, get KubeMQ token, and follow the instructions to run the KubeMQ docker container in your environment.")]),e._v(" "),s("h2",{attrs:{id:"core-concepts"}},[e._v("Core Concepts")]),e._v(" "),s("p",[e._v("KubeMQ messaging broker has 4 messaging patterns:")]),e._v(" "),s("ul",[s("li",[e._v("Events - real-time pub/sub pattern")]),e._v(" "),s("li",[e._v("Events Store - pub/sub with persistence pattern")]),e._v(" "),s("li",[e._v("Commands - the Command part of CQRS pattern, which sends commands with the response for executed or not (with proper error messaging)")]),e._v(" "),s("li",[e._v("Queries - the Query part of CQRS pattern, which sends a query and gets a response with the relevant query result back")])]),e._v(" "),s("p",[e._v("For each one of the patterns, we can distinguish between the senders and the receivers.")]),e._v(" "),s("p",[e._v("For events and events store, the KubeMQ supports both RPC and upstream calls.")]),e._v(" "),s("p",[e._v("the data model is almost identical between all the pattern with some data added related to the specific patter.")]),e._v(" "),s("p",[e._v("The common part of all the patterns are:")]),e._v(" "),s("ul",[s("li",[e._v("Id - the sender can set the Id for each type of message, or the Id is automatically generated a UUID Id for him.")]),e._v(" "),s("li",[e._v("Metadata - a string field that can hold any metadata related to the message")]),e._v(" "),s("li",[e._v("Body - a Bytes array which holds the actual payload to be sent from the sender to the receiver")])]),e._v(" "),s("p",[e._v("The KubeMQ core transport is based on gRPC, and the library is a wrapper around the client-side of gRPC complied protobuf hence leveraging the gRPC benefits and advantages.")]),e._v(" "),s("p",[e._v("Before any transactions to be performed with KubeMQ server, the Client should connect and dial KubeMQ server and obtain Client connection.")]),e._v(" "),s("p",[e._v("With the Client connection object, the user can perform all transactions to and from KubeMQ server.")]),e._v(" "),s("p",[e._v("A Client connection object is thread-safe and can be shared between all process needed to communicate with KubeMQ.")]),e._v(" "),s("p",[s("strong",[e._v("IMPORTANT")]),e._v(" - it's the user responsibility to close the Client connection when no further communication with KubeMQ is needed.")]),e._v(" "),s("h2",{attrs:{id:"connection"}},[e._v("Connection")]),e._v(" "),s("p",[e._v("Connecting to KubeMQ server can be done like that:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\nclient, err := kubemq.NewClient(ctx,\nkubemq.WithAddress("localhost", 50000),\nkubemq.WithClientId("test-event-client-id"))\nif err != nil {\n   log.Fatal(err)\n}\ndefer Client.Close()\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("List of connection options:")]),e._v(" "),s("ul",[s("li",[e._v("WithAddress - set host and port address of KubeMQ server")]),e._v(" "),s("li",[e._v("WithCredentials - set secured TLS credentials from the input certificate file for Client.")]),e._v(" "),s("li",[e._v("WithToken - set KubeMQ token to be used for KubeMQ connection - not mandatory, only if enforced by the KubeMQ server")]),e._v(" "),s("li",[e._v("WithClientId - set client id to be used in all functions call with this Client - mandatory")]),e._v(" "),s("li",[e._v("WithReceiveBufferSize - set length of the buffered channel to be set in all subscriptions")]),e._v(" "),s("li",[e._v("WithDefaultChannel - set default channel for any outbound requests")]),e._v(" "),s("li",[e._v("WithDefaultCacheTTL - set default cache time to live for any query requests with any CacheKey set value")]),e._v(" "),s("li",[e._v("WithTransportType - set client transport type, currently gRPC or Rest")])]),e._v(" "),s("h2",{attrs:{id:"events"}},[e._v("Events")]),e._v(" "),s("h3",{attrs:{id:"sending-events"}},[e._v("Sending Events")]),e._v(" "),s("h4",{attrs:{id:"single-event"}},[e._v("Single Event")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('err := client.E().\n      SetId("some-id").\n      SetChannel(channel).\n      SetMetadata("some-metadata").\n      SetBody([]byte("hello kubemq - sending single event")).\n      Send(ctx)\nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h4",{attrs:{id:"stream-events"}},[e._v("Stream Events")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('eventStreamCh := make(chan *kubemq.Event, 1)\nerrStreamCh := make(chan error, 1)\ngo client.StreamEvents(ctx, eventStreamCh, errStreamCh)\nevent := client.E().SetId("some-event-id").\n   SetChannel("some_channel").\n   SetMetadata("some-metadata").\n   SetBody([]byte("hello kubemq - sending stream event"))\nfor {\n   select {\n   case err := <-errStreamCh:\n      log.Println(err)\n      return\n   case eventStreamCh <- event:\n      return\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("h3",{attrs:{id:"receiving-events"}},[e._v("Receiving Events")]),e._v(" "),s("p",[e._v("First you should subscribe to Events and get a channel:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('channelName := "testing_event_channel"\nerrCh := make(chan error)\neventsCh, err := client.SubscribeToEvents(ctx, channelName, "", errCh)\nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("Then you can loop over the channel of events:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('for {\n   select {\n   case err := <-errCh:\n      log.Fatal(err)\n   case event := <-eventsCh:\n      log.Printf("Event Received:\\nEventID: %s\\nChannel: %s\\nMetadata: %s\\nBody: %s\\n", event.Id, event.Channel, event.Metadata, event.Body)\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h2",{attrs:{id:"events-store"}},[e._v("Events Store")]),e._v(" "),s("h3",{attrs:{id:"sending-events-store"}},[e._v("Sending Events Store")]),e._v(" "),s("h4",{attrs:{id:"single-event-to-store"}},[e._v("Single Event to Store")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//sending 10 single events to store\nfor i := 0; i < 10; i++ {\n   result, err := client.ES().\n       SetId(fmt.Sprintf("event-store-%d", i)).\n      SetChannel(channelName).\n      SetMetadata("some-metadata").\n      SetBody([]byte("hello kubemq - sending single event to store")).\n      Send(ctx)\n   if err != nil {\n         log.Fatal(err)\n   }\n   log.Printf("Sending event #%d: Result: %t", i, result.Sent)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h4",{attrs:{id:"stream-events-store"}},[e._v("Stream Events Store")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// sending addtional events to store\neventsStoreStreamCh := make(chan *kubemq.EventStore, 1)\neventsStoreSResultCh := make(chan *kubemq.EventStoreResult, 1)\nerrStreamCh := make(chan error, 1)\ngo client.StreamEventsStore(ctx, eventsStoreStreamCh, eventsStoreSResultCh, errStreamCh)\nfor i := 0; i < 10; i++ {\n    event := client.ES().\n    SetId(fmt.Sprintf("event-store-%d", i)).\n    SetChannel(channelName).\n    SetMetadata("some-metadata").\n    SetBody([]byte("hello kubemq - sending stream event to store"))\n    eventsStoreStreamCh <- event\n    select {\n        case err := <-errStreamCh:\n          log.Println(err)\n          return\n          case result := <-eventsStoreSResultCh:\n             log.Printf("Sending event #%d: Result: %t", i, result.Sent)\n      }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("h3",{attrs:{id:"receiving-events-store"}},[e._v("Receiving Events Store")]),e._v(" "),s("p",[e._v("First you should subscribe to Events Store and get a channel:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('eventsCh, err := client.SubscribeToEventsStore(ctx, channelName, "", errCh, kubemq.StartFromFirstEvent())\nif err != nil {\n   log.Fatal(err)\n }\n  \n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h4",{attrs:{id:"subscription-options"}},[e._v("Subscription Options")]),e._v(" "),s("p",[e._v("KubeMQ supports 6 types of subscriptions:")]),e._v(" "),s("ul",[s("li",[e._v("StartFromNewEvents - start event store subscription with only new events")]),e._v(" "),s("li",[e._v("StartFromFirstEvent - replay all the stored events from the first available sequence and continue stream new events from this point")]),e._v(" "),s("li",[e._v("StartFromLastEvent - replay the last event and continue stream new events from this point")]),e._v(" "),s("li",[e._v("StartFromSequence - replay events from specific event sequence number and continue stream new events from this point")]),e._v(" "),s("li",[e._v("StartFromTime - replay events from specific time continue stream new events from this point")]),e._v(" "),s("li",[e._v("StartFromTimeDelta - replay events from specific current time - delta duration in seconds, continue stream new events from this point")])]),e._v(" "),s("p",[e._v("Then you can loop over the channel of events:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('for {\n   select {\n   case err := <-errCh:\n      log.Fatal(err)\n   case event := <-eventsCh:\n      log.Printf("Receive EventStore\\nSequence: %d\\nTime: %s\\nBody: %s\\n", event.Sequence, event.Timestamp, event.Body)\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h2",{attrs:{id:"commands"}},[e._v("Commands")]),e._v(" "),s("h3",{attrs:{id:"concept"}},[e._v("Concept")]),e._v(" "),s("p",[e._v("Commands implement synchronous messaging pattern which the sender send a request and wait for a specific amount of time to get a response.")]),e._v(" "),s("p",[e._v("The response can be successful or not. This is the responsibility of the responder to return with the result of the command within the time the sender set in the request.")]),e._v(" "),s("h3",{attrs:{id:"sending-command-requests"}},[e._v("Sending Command Requests")]),e._v(" "),s("p",[e._v("In this example, the responder should send his response withing one second. Otherwise, an error will be return as timeout.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('response, err := client.C().\n   SetId("some-command-id").\n   SetChannel(channelName).\n   SetMetadata("some-metadata").\n   SetBody([]byte("hello kubemq - sending command, please reply")).\n   SetTimeout(time.Second).\n   Send(ctx)\nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"receiving-commands-requests"}},[e._v("Receiving Commands Requests")]),e._v(" "),s("p",[e._v("First get a channel of commands:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('errCh := make(chan error)\ncommandsCh, err := client.SubscribeToCommands(ctx, channelName, "", errCh)\nif err != nil {\n      log.Fatal(err)\n    }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Then a loop over the channel will get the requests from the senders.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('for {\n   select {\n   case err := <-errCh:\n      log.Fatal(err)\n        return\n   case command := <-commandsCh:\n      log.Printf("Command Received:\\nId %s\\nChannel: %s\\nMetadata: %s\\nBody: %s\\n", command.Id, command.Channel, command.Metadata, command.Body)\n   case <-ctx.Done():\n      return\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h3",{attrs:{id:"sending-a-command-response"}},[e._v("Sending a Command Response")]),e._v(" "),s("p",[e._v("When sending a response, there are two essential things to remember:")]),e._v(" "),s("ul",[s("li",[e._v("Set the relevant requestId which you respond to")]),e._v(" "),s("li",[e._v("Set the ResponseTo string to the value of the request ResponseTo field")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("err := client.R().\n    SetRequestId(command.Id).\n   SetResponseTo(command.ResponseTo).\n   SetExecutedAt(time.Now()).\n   Send(ctx)\nif err != nil {\n   log.Fatal(err)\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h2",{attrs:{id:"queries"}},[e._v("Queries")]),e._v(" "),s("h3",{attrs:{id:"concept-2"}},[e._v("Concept")]),e._v(" "),s("p",[e._v("Queries implement synchronous messaging pattern which the sender send a request and wait for a specific amount of time to get a response.")]),e._v(" "),s("p",[e._v("The response must include metadata or body together with an indication of successful or not operation. This is the responsibility of the responder to return with the result of the query within the time the sender set in the request.")]),e._v(" "),s("h3",{attrs:{id:"sending-query-requests"}},[e._v("Sending Query Requests")]),e._v(" "),s("p",[e._v("In this example, the responder should send his response withing one second. Otherwise, an error will be return as timeout.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('response, err := client.Q().\n    SetId("some-query-id").\n    SetChannel(channel).\n   SetMetadata("some-metadata").\n   SetBody([]byte("hello kubemq - sending a query, please reply")).\n   SetTimeout(time.Second).\n   Send(ctx)\nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"receiving-query-requests"}},[e._v("Receiving Query Requests")]),e._v(" "),s("p",[e._v("First get a channel of queries:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('errCh := make(chan error)\nqueriesCh, err := client.SubscribeToQueries(ctx, channelName, "", errCh)\nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Then a loop over the channel will get the requests from the senders.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('for {\n   select {\n   case err := <-errCh:\n      log.Fatal(err)\n      return\n   case query := <-queriesCh:\n      log.Printf("Query Received:\\nId %s\\nChannel: %s\\nMetadata: %s\\nBody: %s\\n", query.Id, query.Channel, query.Metadata, query.Body)\n   case <-ctx.Done():\n      return\n       }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h3",{attrs:{id:"sending-a-query-response"}},[e._v("Sending a Query Response")]),e._v(" "),s("p",[e._v("When sending a response, there are two essential things to remember:")]),e._v(" "),s("ul",[s("li",[e._v("Set the relevant requestId which you respond to")]),e._v(" "),s("li",[e._v("Set the ResponseTo string to the value of the request ResponseTo field")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('err := client.R().\n    SetRequestId(query.Id).\n   SetResponseTo(query.ResponseTo).\n   SetExecutedAt(time.Now()).\n   SetMetadata("this is a response").\n   SetBody([]byte("got your query, you are good to go")).\n   Send(ctx)\n   \nif err != nil {\n   log.Fatal(err)\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])])])}],!1,null,null,null);a.options.__file="sdk-go.md";n.default=a.exports}}]);